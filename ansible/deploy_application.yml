---
- hosts: ec2_instances
  become: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    deployment_environment: "{{ deploy_env }}"  # Reference directly

  tasks:
    - name: Check the deployment_environment variable
      debug:
        msg: "Deploy Environment: {{ deployment_environment }}"

    - name: Test SSH connection by creating a file on Production EC2
      file:
        path: "/home/ec2-user/test_connection.txt"
        state: touch
        owner: ec2-user
        group: ec2-user
      when: deployment_environment == "production"

    - name: Kill any running instance of the Flask application
      shell: |
        pkill -f src/app.py || true
      ignore_errors: yes

    - name: Ensure the application directory exists
      file:
        path: "/home/ec2-user/{{ repo_name }}/src"
        state: directory
        owner: ec2-user
        group: ec2-user

    - name: Synchronize updated application files
      synchronize:
        src: "/home/ec2-user/{{ repo_name }}/src/"
        dest: "/home/ec2-user/{{ repo_name }}/src/"
        delete: yes
      delegate_to: localhost  # Ensure rsync runs from localhost where the key exists

    - name: Start the Flask application
      shell: |
        source /home/ec2-user/venv/bin/activate
        nohup python /home/ec2-user/{{ repo_name }}/src/app.py --port=8080 > /home/ec2-user/app.log 2>&1 &
      args:
        chdir: /home/ec2-user/{{ repo_name }}

    - name: Install Nginx (only for production environment)
      yum:
        name: nginx
        state: present
      when: deployment_environment == "production"

    - name: Configure Nginx as a reverse proxy (only for production environment)
      copy:
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://127.0.0.1:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        dest: /etc/nginx/conf.d/flask_app.conf
        owner: root
        group: root
        mode: '0644'
      when: deployment_environment == "production"

    - name: Remove default Nginx configuration (only for production environment)
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      when: deployment_environment == "production"

    - name: Start and enable Nginx (only for production environment)
      service:
        name: nginx
        state: started
        enabled: yes
      when: deployment_environment == "production"

    - name: Restart Nginx to apply the configuration (only for production environment)
      service:
        name: nginx
        state: restarted
      when: deployment_environment == "production"